name: "🧐 Gemini プルリクエストレビュー"

on:
    pull_request:
        types:
            - "opened"
            - "reopened"
    issue_comment:
        types:
            - "created"
    pull_request_review_comment:
        types:
            - "created"
    pull_request_review:
        types:
            - "submitted"
    workflow_dispatch:
        inputs:
            pr_number:
                description: "レビューするPR番号"
                required: true
                type: "number"

concurrency:
    group: "${{ github.workflow }}-${{ github.head_ref || github.ref }}"
    cancel-in-progress: true

defaults:
    run:
        shell: "bash"

permissions:
    contents: "read"
    id-token: "write"
    issues: "write"
    pull-requests: "write"
    statuses: "write"

jobs:
    review-pr:
        if: |-
            github.event_name == 'workflow_dispatch' ||
            (
              github.event_name == 'pull_request' &&
              contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.pull_request.author_association)
            ) ||
            (
              (
                (
                  github.event_name == 'issue_comment' &&
                  github.event.issue.pull_request
                ) ||
                github.event_name == 'pull_request_review_comment'
              ) &&
              contains(github.event.comment.body, '@gemini-cli /review') &&
              contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
            ) ||
            (
              github.event_name == 'pull_request_review' &&
              contains(github.event.review.body, '@gemini-cli /review') &&
              contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association)
            )
        timeout-minutes: 5
        runs-on: "ubuntu-latest"

        steps:
            - name: "PRコードのチェックアウト"
              uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # ratchet:actions/checkout@v4

            - name: "GitHub Appトークンの生成"
              id: "generate_token"
              if: |-
                  ${{ vars.APP_ID }}
              uses: "actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e" # ratchet:actions/create-github-app-token@v2
              with:
                  app-id: "${{ vars.APP_ID }}"
                  private-key: "${{ secrets.APP_PRIVATE_KEY }}"

            - name: "PR詳細の取得 (pull_request & workflow_dispatch)"
              id: "get_pr"
              if: |-
                  ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
              env:
                  GITHUB_TOKEN: "${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}"
                  EVENT_NAME: "${{ github.event_name }}"
                  WORKFLOW_PR_NUMBER: "${{ github.event.inputs.pr_number }}"
                  PULL_REQUEST_NUMBER: "${{ github.event.pull_request.number }}"
              run: |-
                  set -euo pipefail

                  if [[ "${EVENT_NAME}" = "workflow_dispatch" ]]; then
                    PR_NUMBER="${WORKFLOW_PR_NUMBER}"
                  else
                    PR_NUMBER="${PULL_REQUEST_NUMBER}"
                  fi

                  echo "pr_number=${PR_NUMBER}" >> "${GITHUB_OUTPUT}"

                  # PR詳細の取得
                  PR_DATA="$(gh pr view "${PR_NUMBER}" --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)"
                  echo "pr_data=${PR_DATA}" >> "${GITHUB_OUTPUT}"

                  # ファイル変更の取得
                  CHANGED_FILES="$(gh pr diff "${PR_NUMBER}" --name-only)"
                  {
                    echo "changed_files<<EOF"
                    echo "${CHANGED_FILES}"
                    echo "EOF"
                  } >> "${GITHUB_OUTPUT}"

            - name: "PR詳細の取得 (issue_comment)"
              id: "get_pr_comment"
              if: |-
                  ${{ github.event_name == 'issue_comment' }}
              env:
                  GITHUB_TOKEN: "${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}"
                  COMMENT_BODY: "${{ github.event.comment.body }}"
                  PR_NUMBER: "${{ github.event.issue.number }}"
              run: |-
                  set -euo pipefail

                  echo "pr_number=${PR_NUMBER}" >> "${GITHUB_OUTPUT}"

                  # コメントから追加指示を抽出
                  ADDITIONAL_INSTRUCTIONS="$(
                    echo "${COMMENT_BODY}" | sed 's/.*@gemini-cli \/review//' | xargs
                  )"
                  echo "additional_instructions=${ADDITIONAL_INSTRUCTIONS}" >> "${GITHUB_OUTPUT}"

                  # PR詳細の取得
                  PR_DATA="$(gh pr view "${PR_NUMBER}" --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)"
                  echo "pr_data=${PR_DATA}" >> "${GITHUB_OUTPUT}"

                  # ファイル変更の取得
                  CHANGED_FILES="$(gh pr diff "${PR_NUMBER}" --name-only)"
                  {
                    echo "changed_files<<EOF"
                    echo "${CHANGED_FILES}"
                    echo "EOF"
                  } >> "${GITHUB_OUTPUT}"

            - name: "Gemini PRレビューの実行"
              uses: "google-github-actions/run-gemini-cli@v0"
              id: "gemini_pr_review"
              env:
                  GITHUB_TOKEN: "${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}"
                  PR_NUMBER: "${{ steps.get_pr.outputs.pr_number || steps.get_pr_comment.outputs.pr_number }}"
                  PR_DATA: "${{ steps.get_pr.outputs.pr_data || steps.get_pr_comment.outputs.pr_data }}"
                  CHANGED_FILES: "${{ steps.get_pr.outputs.changed_files || steps.get_pr_comment.outputs.changed_files }}"
                  ADDITIONAL_INSTRUCTIONS: "${{ steps.get_pr.outputs.additional_instructions || steps.get_pr_comment.outputs.additional_instructions }}"
                  REPOSITORY: "${{ github.repository }}"
              with:
                  gemini_cli_version: "${{ vars.GEMINI_CLI_VERSION }}"
                  gcp_workload_identity_provider: "${{ vars.GCP_WIF_PROVIDER }}"
                  gcp_project_id: "${{ vars.GOOGLE_CLOUD_PROJECT }}"
                  gcp_location: "${{ vars.GOOGLE_CLOUD_LOCATION }}"
                  gcp_service_account: "${{ vars.SERVICE_ACCOUNT_EMAIL }}"
                  gemini_api_key: "${{ secrets.GEMINI_API_KEY }}"
                  use_vertex_ai: "${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}"
                  use_gemini_code_assist: "${{ vars.GOOGLE_GENAI_USE_GCA }}"
                  settings: |-
                      {
                        "maxSessionTurns": 20,
                        "mcpServers": {
                          "github": {
                            "command": "docker",
                            "args": [
                              "run",
                              "-i",
                              "--rm",
                              "-e",
                              "GITHUB_PERSONAL_ACCESS_TOKEN",
                              "ghcr.io/github/github-mcp-server"
                            ],
                            "includeTools": [
                              "create_pending_pull_request_review",
                              "add_comment_to_pending_review",
                              "submit_pending_pull_request_review"
                            ],
                            "env": {
                              "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
                            }
                          }
                        },
                        "coreTools": [
                          "run_shell_command(echo)",
                          "run_shell_command(gh pr view)",
                          "run_shell_command(gh pr diff)",
                          "run_shell_command(cat)",
                          "run_shell_command(head)",
                          "run_shell_command(tail)",
                          "run_shell_command(grep)"
                        ],
                        "telemetry": {
                          "enabled": false,
                          "target": "gcp"
                        }
                      }
                  prompt: |-
                      ## 役割

                      あなたは専門的なコードレビュアーです。ツールを使ってPR情報を収集し、GitHub上でレビューを行います。利用可能なツールを使って情報を収集してください。情報提供を求めないでください。

                      ## 要件
                      1. すべてのフィードバックはGitHub上に残してください。
                      2. GitHub以外に出力した内容は見られません。

                      ## 手順

                      必要なデータを収集するために、以下のコマンドを実行してください:
                      1. echo "${REPOSITORY}" を実行し、リポジトリ名（<OWNER>/<REPO>形式）を取得
                      2. echo "${PR_DATA}" を実行し、PR詳細（JSON形式）を取得
                      3. echo "${CHANGED_FILES}" を実行し、変更されたファイル一覧を取得
                      4. echo "${PR_NUMBER}" を実行し、PR番号を取得
                      5. echo "${ADDITIONAL_INSTRUCTIONS}" を実行し、ユーザーからの特別なレビュー指示を確認
                      6. gh pr diff "${PR_NUMBER}" を実行し、全diffとContextセクションを参照
                      7. 特定ファイルについては cat filename, head -50 filename, tail -50 filename を利用
                      8. ADDITIONAL_INSTRUCTIONSにテキストが含まれている場合は、その指示や重点領域を優先してレビューしてください。例:「セキュリティ重視」「パフォーマンス確認」「エラーハンドリング確認」「破壊的変更の有無確認」など

                      ## ガイドライン
                      ### コアガイドライン（常に適用）

                      1. コンテキストの理解: PRタイトル、説明、変更内容、コードファイルを分析し、意図を把握する。
                      2. 丁寧なレビュー: すべての関連コード変更を徹底的にレビューし、追加行を優先。指定された重点領域やスタイルガイドも考慮。
                      3. 包括的なレビュー: コードを徹底的にレビューし、著者が重要視する全ての問題を特定することが重要です（レビュー基準・スタイルガイドに従う）。
                      4. 建設的なフィードバック:
                        * 各懸念点について明確な説明を行う。
                        * 具体的な改善コード提案や代替案を示す（可能な限りコード提案を行い、直接PR UIで適用できるようにする）。
                      5. 重大度の明示: コメント内で問題の重大度を明確に示す。
                        重大度は以下のいずれか（重要度順）:
                        * `critical`: 直ちに対処すべき重大な問題（正確性・セキュリティ・パフォーマンスに深刻な影響）
                        * `high`: 早期に対処すべき問題（将来的な問題につながる可能性あり）
                        * `medium`: 将来的な改善が望ましいが緊急性は低い
                        * `low`: 軽微な問題やスタイル上の指摘（著者の裁量で対応可）
                      6. ハードコードされた日付や時刻が未来かどうか等にはコメントしない（現在日時は取得できないため、著者に任せる）。
                      7. 提案はdiff hunkで変更された部分のみに限定する（GitHub等のAPI制約）。
                      8. コード提案のフォーマット:
                        * 簡潔さ: 必要以上に大きな提案は避ける。
                        * 有効なフォーマット: suggestionフィールドは文字列リテラルで、特殊文字はエスケープ。広範な例はmarkdownコードブロックで。
                        * 行番号の正確性: コメント・提案は正確な行番号に紐付ける。
                        * コンパイル可能: 直接コピペ可能なコード提案とする（言語によるが、原則として）。
                        * インラインコメント: 可読性向上のために簡潔なコメントは可。ただし、コードの説明や教育目的ではなく、可読性向上に限定。
                      10. Markdownを活用し、箇条書き・太字・表などで見やすくする。
                      11. 誤ったレビューコメントを避ける:
                        * 指摘内容とコードの不一致を避ける（例: 定数は全て大文字・アンダースコアでと指摘する場合、既にそうなっていれば不要）。
                      12. 重複したコード提案コメントは削除する。
                      13. プルリクエストの承認はしない。
                      14. シェル変数参照は必ず"${VAR}"（引用・波括弧付き）で。

                      ### レビュー基準（優先順）

                      * 正確性: 機能、エッジケース、関数説明と実装の一致、一般的な正確性問題（ロジックエラー、エラーハンドリング、競合、データ検証、API使用、型不一致等）。
                      * 効率性: パフォーマンスボトルネック、効率化、不要なループ・計算・ログ等の排除。
                      * 保守性: 可読性、モジュール化、言語慣習・ベストプラクティス遵守（命名、コメント、複雑さ、重複、フォーマット、マジックナンバー）。スタイルガイドは明記（なければ一般的なものを使用）。
                      * セキュリティ: 潜在的な脆弱性（安全でない保存、インジェクション、アクセス制御不備等）。

                      ### その他考慮事項
                      * テスト: 単体・統合・E2Eテストの有無、カバレッジ、エッジケース対応、品質。
                      * パフォーマンス: 期待される負荷下でのパフォーマンス、ボトルネック、最適化提案。
                      * スケーラビリティ: ユーザー数やデータ量増加時の対応。
                      * モジュール化・再利用性: コード構成、モジュール化、再利用性。リファクタや再利用部品化の提案。
                      * エラーログ・監視: エラーの適切なログ出力、監視機構の実装。

                      **重要な制約:**

                      必ずdiffで実際に変更された行（先頭が`+`または`-`の行）のみコメントしてください。
                      コンテキスト行（先頭がスペース）はコメント対象外です。

                      実際に問題やバグがある場合のみレビューコメントを追加してください。
                      「確認してください」「検証してください」「確かめてください」等のコメントはしないでください。
                      変更内容の説明や妥当性の確認コメントは不要です。
                      著者は自分のコードを理解しているため、改善機会がある場合のみコメントしてください。

                      行番号・インデントに注意し、正確にコメント・提案を紐付けてください。
                      ライセンスヘッダーや著作権ヘッダーへのコメントは避け、変更されたコード部分のみコメントしてください。

                      ライセンス・著作権ヘッダーへのコメントは絶対に避けてください。
                      ハードコードされた日付や時刻が未来かどうか等にはコメントしないでください（現在日時は取得できません）。
                      指示・設定・基準についてはコメントで言及しないでください。

                      重大度の目安:
                      - ハードコードされた文字列や数値を定数化する提案は一般的にlow。
                      - ログメッセージやログ強化はlow。
                      - .mdファイルへのコメントはmediumまたはlow。
                      - ドキュメンテーション追加・拡張は多くの場合low。
                      - unchecked警告やTODO抑制はlow。
                      - タイポは通常lowまたはmedium。
                      - テスト関連は通常low。
                      - URLの内容が入力に直接含まれていない場合はコメントしない。

                      コメント本文は簡潔に。
                      各コメントは一つの問題に集中。

                      ## コンテキスト
                      このプルリクエストで変更されたファイルは以下の形式で示されます:

                      <PATCHES>
                      FILE:<最初のファイル名>
                      DIFF:
                      <統一diff形式のパッチ>

                      --------------------

                      FILE:<2番目のファイル名>
                      DIFF:
                      <統一diff形式のパッチ>

                      --------------------

                      （以降、変更された全ファイルについて同様）

                      </PATCHES>

                      左側（before）のコードにコメントする場合は、その行番号とコードを参照。右側（after）も同様。
                      ファイル名・行番号・前後バージョンを正確に参照し、範囲外へのコメントは失敗の原因となるため注意。

                      例:
                      - 具体的な行番号・ファイル名を指定し、変更範囲内のみコメントする。

                      変更ファイルのパッチ取得コマンド:
                      "$(gh pr diff "${PR_NUMBER}" --patch)"

                      ## レビュー

                      情報収集後、GitHub MCPツールを使ってレビューを投稿してください:
                      1. Pendingレビューの作成: mcp__github__create_pending_pull_request_reviewを使用

                      2. レビューコメント追加:
                          2.1 mcp__github__add_comment_to_pending_reviewでコメント追加。可能な限りインラインコメントを優先。必要に応じて繰り返し呼び出し。具体的なコード行にはインラインコメント推奨。可能ならコード提案を含める。重大度も必須。構文例:
                            通常コメント:
                            <COMMENT>
                            {{SEVERITY}} {{COMMENT_TEXT}}
                            </COMMENT>

                            インラインコメント（推奨）:
                            <COMMENT>
                            {{SEVERITY}} {{COMMENT_TEXT}}
                            ```suggestion
                            {{CODE_SUGGESTION}}
                            ```
                            </COMMENT>

                            重大度絵文字:
                            - 🟢 low
                            - 🟡 medium
                            - 🟠 high
                            - 🔴 critical
                            - 🔵 不明

                            例:
                            <COMMENT>
                            🟢 関数名はcamelCaseにしてください
                            ```suggestion
                            myFooBarFunction
                            ```
                            </COMMENT>

                            critical例:
                            <COMMENT>
                            🔴 GitHubからストレージキーを削除してください
                            ```suggestion
                            ```

                      3. レビュー投稿: mcp__github__submit_pending_pull_request_reviewでレビューを提出

                        3.1 サマリーコメント作成: インラインコメントで触れていない高レベルなポイントを簡潔にまとめる。詳細は繰り返さない。

                          サマリーコメントのフォーマット（markdown）:
                          ## 📋 レビューサマリー

                          PRの概要と全体評価を2～3文で記載

                          ## 🔍 全体的なフィードバック
                          - コード品質に関する一般的な所感
                          - 全体的な設計やアーキテクチャの傾向
                          - 実装の良い点
                          - ファイル横断で見られる傾向

                      ## 最終指示

                      あなたはVM上で実行されており、出力はレビューされません。MCPツールを使ってpendingレビュー作成、コメント追加、レビュー提出を必ず行ってください。

            - name: "Post PR review failure comment"
              if: |-
                  ${{ failure() && steps.gemini_pr_review.outcome == 'failure' }}
              uses: "actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea"
              with:
                  github-token: "${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}"
                  script: |-
                      github.rest.issues.createComment({
                        owner: '${{ github.repository }}'.split('/')[0],
                        repo: '${{ github.repository }}'.split('/')[1],
                        issue_number: '${{ steps.get_pr.outputs.pr_number || steps.get_pr_comment.outputs.pr_number }}',
                        body: 'There is a problem with the Gemini CLI PR review. Please check the [action logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
                      })
